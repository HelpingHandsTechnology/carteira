---
description: server guidelines
globs: src/server/**/*.ts
---
# Hono Development Guidelines


## Dependency injection

- Para rotas, os serviços devem ser injetados via context
- O mesmo para o banco de dados
- Use `c.get()` para acessar serviços injetados


## Core Principles

- Use English for all code and documentation
- Leverage end-to-end type safety with Hono types
- Follow RESTful conventions for API routes
- Implement modular architecture with Hono middleware

## Server Guidelines

### Basic Structure

- Create modular routers using Hono routes
- Use prefix for API versioning and grouping
- Implement proper error handling with error middleware
- Configure server settings via Hono constructor

```typescript
import { Hono } from 'hono'
import { cors } from 'hono/cors'

const app = new Hono()
  .basePath('/api')
  .use('*', cors())
  .route('/users', userRouter)
  .route('/posts', postRouter)
  .onError((err, c) => {
    return c.json({ 
      error: err.message 
    }, 500)
  })
```

## Ambiente de Desenvolvimento

- Usar sempre Bun ao invés de npm/yarn para todas as operações:
  - Instalação de pacotes: `bun add` ao invés de `npm install`
  - Scripts: `bun run` ao invés de `npm run`
  - Desenvolvimento: `bun dev` ao invés de `npm run dev`
  - Testes: `bun test` ao invés de `npm test`
- Aproveitar as otimizações e velocidade que o Bun oferece
- Manter o bun.lockb no controle de versão

### Route Handlers

- Use descriptive route names in plural form
- Implement proper request validation using Zod
- Return structured responses with proper status codes
- Document routes with OpenAPI/Swagger annotations

### Model Pattern

- Create a Model class for each resource to handle validation and types
- Models should always be defined in the same file as their corresponding router
- Use Zod for schema definitions
- Reuse validation schemas across routes
- Keep validation logic centralized

```typescript
import { z } from 'zod'
import { Hono } from 'hono'
import { zValidator } from '@hono/zod-validator'

export class PostModel {
  static id = z.object({
    id: z.string()
  })

  static create = z.object({
    name: z.string().min(1)
  })

  static update = {
    params: this.id,
    body: this.create
  }

  static delete = {
    params: this.id
  }
}

export const postRouter = new Hono()
  .post('/', zValidator('js', PostModel.create), async (c) => {
    const postService = c.get('postService')
    const body = c.req.valid('json')
    const post = await postService.create(body)
    return c.json(post)
  })
```

## API Guidelines

### Client Setup

- Export server type for end-to-end type safety
- Configure client with proper base URL
- Implement error handli for API responses
- Use proper TypeScript types for request/response

```typescript
import { hc } from 'hono/client'
import type { AppType } from './server'

const api = hc<AppType>('http://localhost:3000')
```

### API Consumption

- Use proper HTTP methods
- Handle responses with proper error checking
- Implement proper TypeScript types
- Use proper error handling

```typescript
// GET /api/posts
const res = await api.api.posts.$get()
const data = await res.json()

// POST /api/posts
const res = await api.api.posts.$post({
  json: {
    title: 'Hello',
    content: 'World'
  }
})
const data = await res.json()
```

## Essential Patterns

### Configuration

- Use environment variables for configuration
- Implement proper validation for config values
- Use TypeScript for type-safe configuration
- Follow the principle of least privilege

### Error Handling

- Use `@gots` for all error handling in the application
- Never use try/catch directly, always wrap in AppResult
- Return structured error responses
- Log errors appropriately

#### Error Types

```typescript
// Define domain-specific error types
export type AuthError = 
  | { type: 'INVALID_CREDENTIALS' }
  | { type: 'USER_NOT_FOUND' }
  | { type: 'EMAIL_ALREADY_EXISTS' }

// Use AppResult for operations
import { AppResult, ok, err } from '@/lib/gots'

function validatePassword(password: string): AppResult<string, AuthError> {
  if (password.length < 6) {
    return err({ type: 'INVALID_CREDENTIALS' })
  }
  return ok(password)
}

// Use fromPromise for asynchronous operations
import { fromPromise } from '@/lib/gots'

async function findUser(email: string): Promise<AppResult<User, AuthError>> {
  return fromPromise(
    db.users.findUnique({ where: { email } }),
    () => ({ type: 'USER_NOT_FOUND' })
  )
}
```

#### Error Handling Patterns

1. Chain Operations with Promise chaining:
```typescript
const signupUser = async (data: SignupData): Promise<AppResult<User, AuthError>> => {
  const [validatedUser, validationError] = await validateUser(data)
  if (validationError) return err(validationError)
  
  const [user, createError] = await createUser(validatedUser)
  if (createError) return err(createError)
  
  const [_, emailError] = await sendWelcomeEmail(user)
  if (emailError) return err(emailError)
  
  return ok(user)
}
```

2. Transform Errors:
```typescript
const [user, error] = await findUser(email)
if (error) {
  return err({
    code: 'AUTH_ERROR',
    message: getErrorMessage(error)
  })
}
```

3. Handle Multiple Results:
```typescript
const [emailValidation, emailError] = await validateEmail(email)
if (emailError) return err(emailError)

const [passwordValidation, passwordError] = await validatePassword(password)
if (passwordError) return err(passwordError)

const [userExists, userError] = await checkUserExists(email)
if (userError) return err(userError)

return ok({ email: emailValidation, password: passwordValidation, exists: userExists })
```

#### Response Structure

All API responses should follow this structure:
```typescript
// Success Response
{
  success: true,
  data: T
}

// Error Response
{
  success: false,
  error: {
    code: string
    message: string
    details?: unknown
  }
}
```

#### Best Practices

1. Always define specific error types for each domain
2. Use `fromPromise` for database operations
3. Use proper error handling with AppResult type
4. Transform low-level errors to domain errors
5. Handle errors early in the call chain
6. Log errors at the edge of the system
7. Never expose internal errors to clients
8. Document all possible error types in function signatures

### Testing

- Write unit tests for route handlers
- Test API endpoints with Hono client
- Implement proper test fixtures
- Follow AAA pattern (Arrange-Act-Assert)

```typescript
import { describe, expect, it } from 'bun:test'
import { app } from './server'

describe('Posts API', () => {
  it('should create a post', async () => {
    const res = await app.api.posts.$post({
      json: {
        title: 'Test',
        content: 'Content'
      }
    })
    const data = await res.json()
    
    expect(res.status).toBe(200)
    expect(data.title).toBe('Test')
  })
})
```

## Best Practices

- Use proper TypeScript types everywhere
- Implement proper validation for all inputs using Zod
- Follow REST conventions for API design
- Use proper error handling with @gots
- Write comprehensive tests
- Document your API properly
- Use proper logging
- Follow security best practices
- Implement proper CORS handling
- Use proper HTTP methods

## Database Guidelines

### Schema Management

- Use Drizzle ORM for database operations
- Keep schema definitions in `src/server/db/schema.ts`
- Use TypeScript for type-safe schema definitions
- Follow naming conventions (plural for tables, singular for columns)

### Migration Strategy

- Avoid using migrations for development
- Use `drizzle-kit push` for schema updates
- Only use migrations in production environments
- Keep schema changes backwards compatible
- Document breaking changes in schema

### Schema Updates

```typescript
// Use push command for development
bun run drizzle-kit push

// Avoid using migrations during development
// ❌ bun run drizzle-kit generate
// ❌ bun run drizzle-kit migrate
```

### Best Practices for Schema Changes

- Always use `push` command for development
- Test schema changes locally before pushing
- Keep schema changes atomic and focused
- Document schema changes in commit messages
- Use proper column types and constraints
- Implement proper indexes for performance
- Follow naming conventions consistently

### Functional Programming with @gots
- Use desestruturação para acessar os valores e erros: `const [data, error] = result`
- Mantenha as transformações puras e livres de efeitos colaterais
- Evite envolver valores desnecessariamente em AppResult
- Use `fromPromise` para operações assíncronas
- Sempre trate os erros o mais cedo possível na cadeia de chamadas

```typescript
// ❌ Não use Promise.resolve/reject diretamente
return fromPromise(
  Promise.resolve(value),
  () => ({ type: "ERROR" })
)

// ✅ Use ok/err
return ok(value)

// ❌ Não use Promise.reject com fromPromise
return fromPromise<never, AuthError>(
  Promise.reject({ type: "NOT_FOUND" }),
  (e) => e as AuthError
)

// ✅ Use err diretamente
return err({ type: "NOT_FOUND" })

// ❌ Envolvimento desnecessário em Promise
return fromPromise(
  Promise.resolve(this.mapToUser(user)),
  () => ({ type: "ERROR" })
)

// ✅ Envolvimento direto do valor
return ok(this.mapToUser(user))